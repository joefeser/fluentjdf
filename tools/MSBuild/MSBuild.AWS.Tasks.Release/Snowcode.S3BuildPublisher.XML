<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Snowcode.S3BuildPublisher</name>
    </assembly>
    <members>
        <member name="P:Snowcode.S3BuildPublisher.AwsTaskBase.EncryptionContainerName">
            <summary>
            Gets or sets the container to be used when decrypting the stored credentials.
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.Client.AwsClientDetails">
            <summary>
            Holds Client connection details for AWS
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.Client.ClientDetailsStore">
            <summary>
            Store AWS client details in the HKCU registry hive.
            </summary>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.Client.ClientDetailsStore.Save(System.String,Snowcode.S3BuildPublisher.Client.AwsClientDetails)">
            <summary>
            Save the Aws Client Details to the registry, encrypts the secret key in the process.
            </summary>
            <param name="containerName">Encryption container to use</param>
            <param name="clientDetails">Client details to store</param>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.Client.ClientDetailsStore.Load(System.String)">
            <summary>
            Load AWS client details from the registry.
            </summary>
            <param name="containerName">Encryption container name</param>
            <returns>Aws Client Details</returns>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.Client.ClientDetailsStore.CreateSubKeyIfNotExists">
            <summary>
            Opens a writable subkey, creating it if needed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.Client.EncryptionHelper.Encrypt(System.String,System.String)">
            <summary>
            Encrypts the value passed in.
            </summary>
            <param name="containerName">the container</param>
            <param name="toEncrypt">The clear value to encrypt</param>
            <returns>returns a base 64 encoded string</returns>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.Client.EncryptionHelper.Decrypt(System.String,System.String)">
            <summary>
            Decrypts the value passed in.
            </summary>
            <param name="containerName">The container name storing the </param>
            <param name="toDecrypt">The encrypted value to decrypt.  Base64 encoded</param>
            <returns></returns>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.Client.StoreClientDetailsTask">
            <summary>
            MSBuid task responsible for storing Amazon AWS client connection details.
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.EC2.AssociateIpAddressTask">
            <summary>
            MSBuild task to associate an AWS public IP Address with a EC2 instance.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.AssociateIpAddressTask.InstanceId">
            <summary>
            Gets or sets the Instance Id
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.AssociateIpAddressTask.IpAddress">
            <summary>
            Gets or sets the IpAddress to assign
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.EC2.AttachVolumeTask">
            <summary>
            MSBuild task to attach a volume to an EC2 instance.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.AttachVolumeTask.InstanceId">
            <summary>
            Gets or sets Instance Id to attach the volume to
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.AttachVolumeTask.Device">
            <summary>
            Gets or sets the device name to use
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.AttachVolumeTask.VolumeId">
            <summary>
            Gets or sets the VolumeId of the volume to attach
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.EC2.CreateSnapShotTask">
            <summary>
            MSBuild task to create a SnapShot of a volume.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.CreateSnapShotTask.VolumeId">
            <summary>
            Gets or sets the VolumeId of the volume to attach
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.CreateSnapShotTask.Description">
            <summary>
            Gets or sets the description to associate with the snapshot
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.CreateSnapShotTask.SnapShotId">
            <summary>
            Gets or sets the created SnapShotId
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.EC2.CreateVolumeFromSnapshotTask">
            <summary>
            MSBuild task to create a volume from a SnapShot
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.CreateVolumeFromSnapshotTask.AvailabilityZone">
            <summary>
            Gets or sets the AWS AvailabilityZone
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.CreateVolumeFromSnapshotTask.SnapShotId">
            <summary>
            Gets or sets the volume size in MiB
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.CreateVolumeFromSnapshotTask.VolumeId">
            <summary>
            Gets or sets the VolumeId of the created volume.
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.EC2.CreateVolumeTask">
            <summary>
            MSBuikd task to create a new AWS EC2 Volume
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.CreateVolumeTask.AvailabilityZone">
            <summary>
            Gets or sets the AWS AvailabilityZone
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.CreateVolumeTask.Size">
            <summary>
            Gets or sets the volume size in MiB
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.CreateVolumeTask.VolumeId">
            <summary>
            Gets or sets the VolumeId of the created volume.
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.EC2.DeleteSnapShotTask">
            <summary>
            MSBuild task to delete a SnapShot.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.DeleteSnapShotTask.SnapShotId">
            <summary>
            Gets or sets the SnapShotId of the SnapShot to delete.
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.EC2.DeleteVolumeTask">
            <summary>
            MSBuild task to delete a EC2 volume.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.DeleteVolumeTask.VolumeId">
            <summary>
            Gets or sets the VolumeId of the Volume to delete.
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.EC2.DescribeEC2InstanceTask">
            <summary>
            MSBuild task to get details of an EC2 Instance.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.DescribeEC2InstanceTask.InstanceId">
            <summary>
            Gets or sets the Instance Id
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.EC2.DetachVolumeTask">
            <summary>
            MSBuild task to detach a volume from an EC2 Instance
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.DetachVolumeTask.InstanceId">
            <summary>
            Gets or sets Instance Id to attach the volume to
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.DetachVolumeTask.Device">
            <summary>
            Gets or sets the device name to use
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.DetachVolumeTask.VolumeId">
            <summary>
            Gets or sets the VolumeId of the volume to attach
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.DetachVolumeTask.Force">
            <summary>
            Gets or sets if the action of detaching should be forced.
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.EC2.DisassociateIpAddressTask">
            <summary>
            MSBuild task to disaccociate a AWS public IP Address from it's current instance.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.DisassociateIpAddressTask.IpAddress">
            <summary>
            Gets or sets the IpAddress
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.EC2.EC2Helper">
            <summary>
            Helper class to control AWS EC2 instances.
            </summary>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.EC2.EC2Helper.StartInstances(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Start's instances - these should be EBS block storage instances.
            </summary>
            <param name="instanceIds">The instance Id of an EC2 instance</param>
            <remarks>This uses EBS storage EC2 instances which can be stopped and started.  The instance should be stopped.</remarks>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.EC2.EC2Helper.StopInstances(System.String[])">
            <summary>
            Stop Amazon EC2 instances.
            </summary>
            <param name="instances"></param>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.EC2.EC2Helper.RunInstance(System.String,System.Int32,System.String,System.String,System.String[])">
            <summary>
            Creates (Runs) a new EC2 instance from the stored AMI image.
            </summary>
            <param name="imageId"></param>
            <param name="numberOfInstances"></param>
            <param name="keyName"></param>
            <param name="userData"></param>
            <param name="securityGroups"></param>
            <returns>Returns a list of ALL instances not terminated, not just the ones started.</returns>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.EC2.EC2Helper.TerminateInstance(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Terminates an EC2 instance.
            </summary>
            <param name="instanceIds"></param>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.EC2.EC2Helper.RebootInstance(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reboots an EC2 instance
            </summary>
            <param name="instanceIds"></param>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.EC2.EC2Helper.WaitForInstances(System.String[],System.String,System.Int32,System.Int32)">
            <summary>
            Wait for the instances to become in the desired state.
            </summary>
            <param name="instanceIds"></param>
            <param name="desiredState"></param>
            <param name="timeOutSeconds"></param>
            <param name="pollIntervalSeconds"></param>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.EC2.EC2Helper.AssociateIpAddress(System.String,System.String)">
            <summary>
            Associate a public IP Address with an EC2 instance
            </summary>
            <param name="instanceId"></param>
            <param name="publicIpAddress"></param>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.EC2.EC2Helper.DisassociateIpAddress(System.String)">
            <summary>
            Disassociate a public IP Address from it's current EC2 instance
            </summary>
            <param name="publicIpAddress"></param>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.EC2.EC2Helper.CreateNewVolume(System.String,System.String)">
            <summary>
            Creates a new volume
            </summary>
            <param name="avilabilityZone">The Availability zone to create the volume in</param>
            <param name="size"></param>
            <returns>Returns the VolumeId of the newly created volume</returns>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.EC2.EC2Helper.CreateSnapShot(System.String,System.String)">
            <summary>
            Create a snapshot of a volume.
            </summary>
            <param name="volumeId"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.EC2.EC2Helper.CreateVolumeFromSnapshot(System.String,System.String)">
            <summary>
            Create a volume from a snapshot
            </summary>
            <param name="avilabilityZone">The Availability zone to create the volume in</param>
            <param name="snapshotId">The SnapShot to create the volume from</param>
            <returns>Returns the VolumeId of the newly created volume</returns>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.EC2.EC2Helper.DeleteVolume(System.String)">
            <summary>
            Deletes a volume
            </summary>
            <param name="volumeId"></param>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.EC2.EC2Helper.DeleteSnapShot(System.String)">
            <summary>
            Deletes a snapshot
            </summary>
            <param name="snapShotId"></param>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.EC2.EC2Helper.AttachVolume(System.String,System.String,System.String)">
            <summary>
            Attaches a volume to a EC2 instance.
            </summary>
            <param name="device">xvdf through xvdp</param>
            <param name="instanceId"></param>
            <param name="volumeId"></param>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.EC2.EC2Helper.DetachVolume(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Detatches a volume from an EC2 instance.
            </summary>
            <param name="device">xvdf through xvdp</param>
            <param name="volumeId"></param>
            <param name="instanceId"></param>
            <param name="force"></param>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.EC2.RebootEC2InstancesTask">
            <summary>
            MSBuild task to reboot ec2 instances.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.RebootEC2InstancesTask.InstanceIds">
            <summary>
            Gets or sets the Instance Id's
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.EC2.RunEC2InstancesTask">
            <summary>
            MSBuild task to run a EC2 instance from the ami image id.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.RunEC2InstancesTask.ImageId">
            <summary>
            Gets or sets the AMI image id launch
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.RunEC2InstancesTask.NumberOfInstances">
            <summary>
            Gets or sets the number of instances to launch
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.RunEC2InstancesTask.KeyName">
            <summary>
            Name of the key pair to launch instances with
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.RunEC2InstancesTask.UserData">
            <summary>
            User data available to the launched instances.  Base64 encoded.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.RunEC2InstancesTask.SecurityGroups">
            <summary>
            Security Groups.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.RunEC2InstancesTask.InstanceIds">
            <summary>
            MSBuild output parameter with the result of the InstanceId's that have been run.
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.EC2.StartEC2InstancesTask">
            <summary>
            MSBuild task to start EC2 Instances.  These should be EBS based instances to support stopping
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.StartEC2InstancesTask.InstanceIds">
            <summary>
            Gets or sets the Instance Id's
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.EC2.StopEC2InstancesTask">
            <summary>
            MSBuild task to stop EC2 Instances.  These should be EBS based instances to support stopping
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.StopEC2InstancesTask.InstanceIds">
            <summary>
            Gets or sets the Instance Id's
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.EC2.TerminateEC2InstancesTask">
            <summary>
            MSBuild task to terminate (kill) EC2 Instances.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.TerminateEC2InstancesTask.InstanceIds">
            <summary>
            Gets or sets the Instance Id's
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.EC2.WaitForEC2InstancesTask">
            <summary>
            MSBuild task to wait for the EC2 instances to become in the desired state
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.WaitForEC2InstancesTask.InstanceIds">
            <summary>
            Gets or sets the Instance Id's
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.WaitForEC2InstancesTask.DesiredState">
            <summary>
            The desired state of the instances 
            </summary>
            <value>one of stopped, running, shutting-down, stopping, pending, terminated</value>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.WaitForEC2InstancesTask.TimeOutSeconds">
            <summary>
            The maximum time to wait for the state change in seconds.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.EC2.WaitForEC2InstancesTask.PollIntervalSeconds">
            <summary>
            How often to poll
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.S3.CreateS3BucketTask">
            <summary>
            MSBuild task to create an AWS S3 Bucket.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.S3.CreateS3BucketTask.BucketName">
            <summary>
            Gets and sets the name of the bucket.
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.S3.DeleteS3BucketTask">
            <summary>
            MSBuild task to delete a S3 Bucket.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.S3.DeleteS3BucketTask.BucketName">
            <summary>
            Gets and sets the name of the bucket.
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.S3.DeleteS3ObjectTask">
            <summary>
            MSBuild task to delete an object from S3
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.S3.DeleteS3ObjectTask.BucketName">
            <summary>
            Gets and sets the name of the bucket.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.S3.DeleteS3ObjectTask.Key">
            <summary>
            Gets and sets the key to the S3 object.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.S3.PutS3FileObjectTask.BucketName">
            <summary>
            Gets and sets the name of the bucket.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.S3.PutS3FileObjectTask.Key">
            <summary>
            Gets and sets the key (name) of the object.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.S3.PutS3FileObjectTask.FileName">
            <summary>
            Gets and sets the file to put.
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.S3.PutS3TextObjectTask">
            <summary>
            MSBuild task to write some text into a AWS S3 object.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.S3.PutS3TextObjectTask.BucketName">
            <summary>
            Gets and sets the name of the bucket.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.S3.PutS3TextObjectTask.Key">
            <summary>
            Gets and sets the key (name) of the object
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.S3.PutS3TextObjectTask.Text">
            <summary>
            Gets and sets the text of the object.
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.S3.S3BuildPublisher">
            <summary>
            MSBuild task to publish a set of files to a S3 bucket.
            </summary>
            <remarks>If made public the files will be available at https://s3.amazonaws.com/bucket_name/folder/file_name</remarks>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.S3.S3BuildPublisher.SourceFiles">
            <summary>
            Gets or sets the source files to be stored.
            </summary>
            <remarks>Subfolders are not supported.</remarks>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.S3.S3BuildPublisher.DestinationFolder">
            <summary>
            Gets or sets the destination folder.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.S3.S3BuildPublisher.DestinationBucket">
            <summary>
            Gets or sets the AWS S3 bucket to store the files in
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.S3.S3BuildPublisher.PublicRead">
            <summary>
            Gets or sets if the files should be publically readable
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.S3.S3Helper">
            <summary>
            Helper class to connect to Amazon aws S3 and store files.
            </summary>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.S3.S3Helper.Publish(System.String[],System.String,System.String,System.Boolean)">
            <summary>
            Publish a file to a S3 bucket, in the folder specified, optionally making it publically readable.
            </summary>
            <param name="files"></param>
            <param name="bucketName"></param>
            <param name="folder"></param>
            <param name="publicRead"></param>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.S3.S3Helper.CreateBucket(System.String)">
            <summary>
            Creates a S3 Bucket.
            </summary>
            <param name="bucketName"></param>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.S3.S3Helper.DeleteBucket(System.String)">
            <summary>
            Delete a S3 Bucket.
            </summary>
            <param name="bucketName"></param>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.S3.S3Helper.PutFileObject(System.String,System.String,System.String)">
            <summary>
            Puts a file into a S3 bucket.
            </summary>
            <param name="bucketName"></param>
            <param name="key"></param>
            <param name="file"></param>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.S3.S3Helper.PutTextObject(System.String,System.String,System.String)">
            <summary>
            Creates a text object in the S3 bucket.
            </summary>
            <param name="bucketName"></param>
            <param name="key"></param>
            <param name="text"></param>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.S3.S3Helper.DeleteObject(System.String,System.String)">
            <summary>
            Seletes an object from a S3 bucket.
            </summary>
            <param name="bucketName"></param>
            <param name="key"></param>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.S3.S3Helper.SetAcl(System.String,System.String,System.String)">
            <summary>
            Sets the ACL
            </summary>
            <param name="bucketName"></param>
            <param name="cannedACL">ACL to use, AuthenticatedRead, BucketOwnerFullControl, BucketOwnerRead, NoACL, Private, PublicRead, PublicReadWrite</param>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.S3.SetS3ObjectAclTask.BucketName">
            <summary>
            Gets and sets the name of the bucket.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.S3.SetS3ObjectAclTask.Key">
            <summary>
            Gets and sets the key (name) of the object.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.S3.SetS3ObjectAclTask.CannedAcl">
            <summary>
            Gets and sets the ACL value
            </summary>
            <value>One of AuthenticatedRead, BucketOwnerFullControl, BucketOwnerRead, NoACL, Private, PublicRead, PublicReadWrite</value>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.SimpleDB.CreateSimpleDBDomainTask">
            <summary>
            MSBuild task to create an AWS SimpleDB Domain
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SimpleDB.CreateSimpleDBDomainTask.DomainName">
            <summary>
            Gets or sets the DomainName of the SimpleDB Database.
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.SimpleDB.DeleteSimpleDBAttributesTask">
            <summary>
            MSBuild task to deletes attributes from an item in SimpleDB
            </summary>
            <remarks>Note that this is plural and takes a list of attribute names to delete.</remarks>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SimpleDB.DeleteSimpleDBAttributesTask.DomainName">
            <summary>
            Gets and sets the DomainName of the SimpleDB Database.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SimpleDB.DeleteSimpleDBAttributesTask.ItemName">
            <summary>
            Gets and sets the name of the item (record key)
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SimpleDB.DeleteSimpleDBAttributesTask.AttributeNames">
            <summary>
            Gets and sets the Attribute names to delete
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.SimpleDB.DeleteSimpleDBDomainTask">
            <summary>
            MSBuild task to delete an AWS SimpleDB Domain
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SimpleDB.DeleteSimpleDBDomainTask.DomainName">
            <summary>
            Gets or sets the DomainName of the SimpleDB Database.
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.SimpleDB.GetSimpleDBAttributeTask">
            <summary>
            MSBuild task to read an attribute from AWS SimpleDB
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SimpleDB.GetSimpleDBAttributeTask.DomainName">
            <summary>
            Gets and sets the DomainName of the SimpleDB Database.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SimpleDB.GetSimpleDBAttributeTask.ItemName">
            <summary>
            Gets and sets the name of the item (record key)
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SimpleDB.GetSimpleDBAttributeTask.AttributeName">
            <summary>
            Gets and sets the Attribute name to store
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SimpleDB.GetSimpleDBAttributeTask.AttributeValue">
            <summary>
            Gets and sets the Attribute value to store.
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.SimpleDB.PutSimpleDBAttributeTask">
            <summary>
            MSBuild task to store an attribute value in SimpleDB
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SimpleDB.PutSimpleDBAttributeTask.DomainName">
            <summary>
            Gets and sets the DomainName of the SimpleDB Database.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SimpleDB.PutSimpleDBAttributeTask.ItemName">
            <summary>
            Gets and sets the name of the item (record key)
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SimpleDB.PutSimpleDBAttributeTask.AttributeName">
            <summary>
            Gets and sets the Attribute name to store
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SimpleDB.PutSimpleDBAttributeTask.AttributeValue">
            <summary>
            Gets and sets the Attribute value to store.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SimpleDB.PutSimpleDBAttributeTask.Replace">
            <summary>
            Gets and sets if the value should be replaced.
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.SimpleDB.SimpleDBHelper">
            <summary>
            AWS SimpleDB helper class.
            </summary>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.SimpleDB.SimpleDBHelper.CreateDomain(System.String)">
            <summary>
            Creates the SimpleDB Domain
            </summary>
            <param name="domainName"></param>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.SimpleDB.SimpleDBHelper.DeleteDomain(System.String)">
            <summary>
            Deletes the simpleDB Domain
            </summary>
            <param name="domainName"></param>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.SimpleDB.SimpleDBHelper.PutAttribute(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Puts attribiutes in SimpleDB
            </summary>
            <param name="domainName"></param>
            <param name="itemName"></param>
            <param name="name"></param>
            <param name="replace"></param>
            <param name="value"></param>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.SimpleDB.SimpleDBHelper.GetAttribute(System.String,System.String,System.String)">
            <summary>
            Get a single attribute back from the item.
            </summary>
            <param name="domainName"></param>
            <param name="itemName"></param>
            <param name="name"></param>
            <returns>Returns the value of the attribute if it exists, otherwise an empty string.</returns>
            <remarks>Can't do multiple as no guarantee as to order.</remarks>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.SimpleDB.SimpleDBHelper.DeleteAttributes(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Deletes the attributes.
            </summary>
            <param name="domainName"></param>
            <param name="itemName"></param>
            <param name="names"></param>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.SNS.AddSNSPermissionsTask">
            <summary>
            MSBuild task to set the permissions on a Simple Notificiation Service Topic
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SNS.AddSNSPermissionsTask.TopicArn">
            <summary>
            Gets or sets the Topic Arn to set permissions on
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SNS.AddSNSPermissionsTask.ActionNames">
            <summary>
            Gets or sets the action names allowed
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SNS.AddSNSPermissionsTask.AwsAccountIds">
            <summary>
            Gets or sets the AwsAccountIds with permission to this notification.  This is the 12 digiti AWS account Id, without the hyphens.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SNS.AddSNSPermissionsTask.Label">
            <summary>
            A unique identifier for the new policy statement.
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.SNS.CreateSNSTopicTask">
            <summary>
            MSBuild task to create a AWS Simple Notification Service Topic.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SNS.CreateSNSTopicTask.TopicName">
            <summary>
            Gets or sets the Topic Name to create
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SNS.CreateSNSTopicTask.TopicArn">
            <summary>
            Gets or sets the TopicArn
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.SNS.DeleteSNSTopicTask">
            <summary>
            MSBuild task to delete a Simple Notification Service Topic.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SNS.DeleteSNSTopicTask.TopicArn">
            <summary>
            Gets or sets the TopicArn
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.SNS.PublishSNSNotificationTask">
            <summary>
            MSBuild task to publish a Simple Notification Services notification.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SNS.PublishSNSNotificationTask.TopicArn">
            <summary>
            Gets or sets the TopicArn
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SNS.PublishSNSNotificationTask.Subject">
            <summary>
            Gets or set the notification subject
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SNS.PublishSNSNotificationTask.Message">
            <summary>
            Gets or sets the notification message
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SNS.PublishSNSNotificationTask.MessageId">
            <summary>
            Gets or sets the returned MessageId
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.SNS.SNSHelper">
            <summary>
            Helper class for Amazon Simple Notification Service.
            </summary>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.SNS.SNSHelper.CreateTopic(System.String)">
            <summary>
            Creates a topic.  Should only be needed to be used once.
            </summary>
            <param name="topicName"></param>
            <returns></returns>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.SNS.SNSHelper.DeleteTopic(System.String)">
            <summary>
            Delete a SNS Topic
            </summary>
            <param name="topicArn"></param>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.SNS.SNSHelper.AddPermission(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Adds permission to the Topic for Aws Accounts to performe the actions named.
            </summary>
            <param name="actionNames"></param>
            <param name="awsAccountIds"></param>
            <param name="label"></param>
            <param name="topicArn"></param>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.SNS.SNSHelper.Publish(System.String,System.String,System.String)">
            <summary>
            Publish a notification
            </summary>
            <param name="topicArn"></param>
            <param name="subject"></param>
            <param name="message"></param>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.SNS.SNSHelper.ListTopics(System.String)">
            <summary>
            List the SNS Topics.
            </summary>
            <param name="nextToken"></param>
            <returns></returns>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.SNS.SNSHelper.Subscribe(System.String,System.String,System.String)">
            <summary>
            Subscribe to a SNS Topic
            </summary>
            <param name="topicArn"></param>
            <param name="protocol"></param>
            <param name="endpoint"></param>
            <returns></returns>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.SNS.SNSHelper.Unsubscribe(System.String)">
            <summary>
            Unsubscribe from a SNS Topic
            </summary>
            <param name="subscriptionArn"></param>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.SNS.SubscribeToSNSTopicTask">
            <summary>
            MSBuild task to subscribe to a Simple Notification Service Topic.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SNS.SubscribeToSNSTopicTask.TopicArn">
            <summary>
            Gets or sets the TopicArn to subscribe to
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SNS.SubscribeToSNSTopicTask.Protocol">
            <summary>
            Gets or sets the protocol. Pptions are http, https, email, email-json, sqs
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SNS.SubscribeToSNSTopicTask.Endpoint">
            <summary>
            Gets or sets the endpoint.  i.e. email address, http(s) url, SQS Arn.
            </summary>
            <remarks>
            For http the endpoint is an URL beginning with "http://"
            For https the endpoint is a URL beginning with "https://"
            For email the endpoint is an e-mail address
            For email-json the endpoint is an e-mail address
            For sqs the endpoint is the ARN of an Amazon SQS queue
            </remarks>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SNS.SubscribeToSNSTopicTask.SubscriptionArn">
            <summary>
            Gets or sets the SubscriptionArn returned by the subscribe action.
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.SNS.UnsubscribeFromSNSTopicTask">
            <summary>
            MSBuild task to unsubscribe from an AWS Simple Notification Service Subscription.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SNS.UnsubscribeFromSNSTopicTask.SubscriptionArn">
            <summary>
            Gets or sets the SubscriptionArn returned by the subscribe action.
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.SQS.CreateSQSQueueTask">
            <summary>
            MSBuild task to create a Simple Queue Service queue.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SQS.CreateSQSQueueTask.QueueName">
            <summary>
            Gets or sets the name of the queue to create.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SQS.CreateSQSQueueTask.QueueUrl">
            <summary>
            Gets and sets the Queue Url returned from the CreateQueue service call.
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.SQS.DeleteSQSMessageTask">
            <summary>
            MSBuild task to delete a message from a queue.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SQS.DeleteSQSMessageTask.QueueUrl">
            <summary>
            Gets and sets the Url of the Queue to delete the message from.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SQS.DeleteSQSMessageTask.ReceiptHandle">
            <summary>
            Gets and sets the message receipt handle to delete.
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.SQS.DeleteSQSQueueTask">
            <summary>
            MSBuild task to delete a Simple Queue Service Queue.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SQS.DeleteSQSQueueTask.QueueUrl">
            <summary>
            Gets and sets the Url of the Queue to delete.
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.SQS.ReceiveSQSMessageTask">
            <summary>
            MSBuild task to receive a message from a queue.  
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SQS.ReceiveSQSMessageTask.QueueUrl">
            <summary>
            Gets and sets the Url of the Queue to delete.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SQS.ReceiveSQSMessageTask.MessageId">
            <summary>
            Gets and sets the MessageId of the message received.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SQS.ReceiveSQSMessageTask.MessageBody">
            <summary>
            Gets and sets the message body received.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SQS.ReceiveSQSMessageTask.ReceiptHandle">
            <summary>
            Gets and sets the message receipt handle, this is need to delete the message from the queue.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SQS.ReceiveSQSMessageTask.HasMessage">
            <summary>
            Gets and sets if a message has been received from the queue
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.SQS.SendSQSMessageTask">
            <summary>
            MSBuild task to send a message to a SQS Queue.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SQS.SendSQSMessageTask.QueueUrl">
            <summary>
            Gets and sets the Url of the Queue to delete.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SQS.SendSQSMessageTask.MessageBody">
            <summary>
            Gets and sets the message to send to the queue
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SQS.SendSQSMessageTask.MessageId">
            <summary>
            Gets and sets the MessageId of the sent message.
            </summary>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.SQS.SQSHelper">
            <summary>
            Helper class for Amazon Simple Queue Service.
            </summary>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.SQS.SQSHelper.CreateQueue(System.String)">
            <summary>
            Creates a SQS queue
            </summary>
            <param name="queueName"></param>
            <returns></returns>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.SQS.SQSHelper.SetQueuePermissions(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the permissions on the queue
            </summary>
            <param name="queueUrl"></param>
            <param name="label"></param>
            <param name="actionNames"></param>
            <param name="awsAccountIds"></param>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.SQS.SQSHelper.DeleteQueue(System.String)">
            <summary>
            Deletes the SQS Queue
            </summary>
            <param name="queueUrl"></param>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.SQS.SQSHelper.ListQueues">
            <summary>
            Lists the Queues
            </summary>
            <returns></returns>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.SQS.SQSHelper.SendMessage(System.String,System.String)">
            <summary>
            Sends a message to the SQS Queue
            </summary>
            <param name="messageBody"></param>
            <param name="queueUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.SQS.SQSHelper.ReceiveMessage(System.String)">
            <summary>
            Receives a message from the SQS Queue
            </summary>
            <param name="queueUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.SQS.SQSHelper.WaitForMessage(System.String,System.Int32,System.Int32)">
            <summary>
            Wait for a message on the Queue
            </summary>
            <param name="queueUrl"></param>
            <param name="timeOutSeconds"></param>
            <param name="pollIntervalSeconds"></param>
            <returns></returns>
            <exception cref="T:System.TimeoutException">thrown if timeOutSeconds is exceeded.</exception>
        </member>
        <member name="M:Snowcode.S3BuildPublisher.SQS.SQSHelper.DeleteMessage(System.String,System.String)">
            <summary>
            Deletes a message from the queue
            </summary>
            <param name="queueUrl"></param>
            <param name="receiptHandle"></param>
        </member>
        <member name="T:Snowcode.S3BuildPublisher.SQS.WaitForSQSMessageTask">
            <summary>
            MSBuild task to wait for a message on the SQS Queue
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SQS.WaitForSQSMessageTask.QueueUrl">
            <summary>
            Gets and sets the Url of the Queue to delete.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SQS.WaitForSQSMessageTask.TimeOutSeconds">
            <summary>
            The time to wait for a message before giving up, in seconds.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SQS.WaitForSQSMessageTask.PollIntervalSeconds">
            <summary>
            How often to poll the queue
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SQS.WaitForSQSMessageTask.MessageId">
            <summary>
            Gets and sets the MessageId of the message received.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SQS.WaitForSQSMessageTask.MessageBody">
            <summary>
            Gets and sets the message body received.
            </summary>
        </member>
        <member name="P:Snowcode.S3BuildPublisher.SQS.WaitForSQSMessageTask.ReceiptHandle">
            <summary>
            Gets and sets the message receipt handle, this is need to delete the message from the queue.
            </summary>
        </member>
    </members>
</doc>
