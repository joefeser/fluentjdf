<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CanOnlyOperateOnJdfNode" xml:space="preserve">
    <value>Can only operate on JDF node.  The node is a {0}</value>
  </data>
	<data name="CanOnlyOperateOnResourceLink">
		<value xml:space="preserve">Can only operate on resource link.  The node is a {0}</value>
	</data>
	<data name="ElementExtensions_JdfParent_NoJdfParentFound">
		<value xml:space="preserve">Could not find JDF parent for element {0}</value>
	</data>
	<data name="ElementExtensions_FirstJdf_NodeNotJdfAndNoJdfParent">
		<value xml:space="preserve">This node is not a JDF and it does not have a JDF parent.  The node is {0}</value>
	</data>
	<data name="JdfElementExtensions_LinkResource_ResourceNameOrIdOrBothRequired">
		<value xml:space="preserve">Linking a resource requires either the resource name or the id (or both).</value>
	</data>
	<data name="ElementExtensions_JdfRoot_NoJdfRootFound">
		<value xml:space="preserve">The element {0} does not have a JDF root</value>
	</data>
	<data name="ElementExtensions_AddContent_RequiresContentToAdd">
		<value xml:space="preserve">AddContent requires content to add</value>
	</data>
	<data name="ResourceExtensions_Resource_ResourceWithIdCannotBeFound">
		<value xml:space="preserve">Resource with ID {0} cannot be found</value>
	</data>
	<data name="JdfElementExtensions_LinkResource_CouldNotFindResourceWithGivenIdAndNameWasNotProvided">
		<value xml:space="preserve">Could not find resource with id {0} and could not create it because name was not provided</value>
	</data>
	<data name="Loader_Loader_FailedToLoadAndCompileSchema">
		<value xml:space="preserve">Failed to load and compile JDF schema.  The error is {0}</value>
	</data>
	<data name="ElementExtensions_ValidateJdf_ValidateJdfRequiresDocumentOfTypeTicket">
		<value xml:space="preserve">ValidateJdf requires the document to be of type Ticket.  Use Ticket.Create().</value>
	</data>
	<data name="PassThroughEncoder_Encode_CannotEncodeMoreThanOnePart">
		<value xml:space="preserve">Pass through encoder cannot encode a transmission part collection containing more than one part.</value>
	</data>
	<data name="TransmissionPart_CannotCreatePartAsFileDoesNotExist">
		<value xml:space="preserve">Cannot create transmission part from file {0} because it does not exist</value>
	</data>
	<data name="XmlTransmissionPart_FailedToLoadXDocumentFromFile">
		<value xml:space="preserve">Failed to load XDocument from {0}</value>
	</data>
	<data name="XmlTransmissionPart_FailedToLoadXDocumentFromStream">
		<value xml:space="preserve">Failed to load XDocument from stream</value>
	</data>
	<data name="JmfElementExtensions_ThrowExceptionIfNotJmfElement_CanOnlyOperateOnJmfNodes">
		<value xml:space="preserve">Can only operate on JMF nodes.  The name is {0}.</value>
	</data>
	<data name="EncodingSettings_ThrowExceptionIfTypeIsNotIEncoding">
		<value xml:space="preserve">Encodings must be of type IEncoding</value>
	</data>
	<data name="TransmissionPartSettings_ThrowExceptionIfTypeIsNotITransmissionPart">
		<value xml:space="preserve">TransmissionParts must be of type ITransmissionPart</value>
	</data>
	<data name="TransmissionSettings_ThrowExceptionIfTypeIsNotITransmitter">
		<value xml:space="preserve">The assigned transmitter must implement ITransmitter</value>
	</data>
	<data name="TransmitterFactory_GetTransmitterForScheme_SchemeNotConfigured">
		<value xml:space="preserve">Scheme {0} is not configured with a transmitter.</value>
	</data>
	<data name="TransmissionPartCollection_Add_TransmissionPartExists">
		<value xml:space="preserve">Transmission part with id {0} already exists</value>
	</data>
	<data name="HttpTransmissionSettingsBuilder_TimeoutInSeconds_MustNotBeLessThanZero">
		<value xml:space="preserve">Timeout in seconds must not be less than zero unless set to Timeout.Infinite</value>
	</data>
	<data name="HttpTransmitter_Transmit_AtLeastOneTransmissionPartIsRequired">
		<value xml:space="preserve">At least one transmission part is required for transmission.</value>
	</data>
	<data name="HttpTransmitter_Transmit_RequiresHttpUrl">
		<value xml:space="preserve">HTTP transmitter only works with http urls</value>
	</data>
	<data name="HttpTransmitter_Transmit_HttpTransmitter_UnexpectedException">
		<value xml:space="preserve">HttpTransmitter failed to transmit {0} because of unexpected exception</value>
	</data>
	<data name="Ticket_Transmit_Failed">
		<value xml:space="preserve">Failed to transmit ticket to {0}</value>
	</data>
	<data name="JmfElementExtensions_AddJmfElement_JMFMustBeRoot">
		<value xml:space="preserve">Can only add JMF as root element.  Root element {0} already exists</value>
	</data>
	<data name="JmfElementExtensions_ThrowExceptionIfNotInMessage_CannotOperateOnElementUnlessItIsInMessage">
		<value xml:space="preserve">The element must be contained in a Message object</value>
	</data>
	<data name="Message_ModifyJmfNode_RootMustExistAndMustbeJmf">
		<value xml:space="preserve">The root of the Message must exist and must be a JMF</value>
	</data>
	<data name="FluentJdfDocumentBase_FluentJdfDocumentBase_FluentJDF_RootNodeRequired">
		<value xml:space="preserve">FluentJDF requires a root node when copying a document.</value>
	</data>
	<data name="Ticket_ModifyJdfNode_RootMustExistAndBeJdf">
		<value xml:space="preserve">Root must exist and must be JDF</value>
	</data>
	<data name="AtLeastOneProcessMustBeSpecified">
		<value xml:space="preserve">You must pass at least one type in order to create a process</value>
	</data>
</root>