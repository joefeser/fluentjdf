<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Onpoint.Commons.Core</name>
    </assembly>
    <members>
        <member name="T:Onpoint.Commons.Core.CodeContracts.ParameterCheck">
            <summary>
            Precondition checking for methods.
            </summary>
        </member>
        <member name="M:Onpoint.Commons.Core.CodeContracts.ParameterCheck.StringRequiredAndNotWhitespace(System.String,System.String)">
            <summary>
            Throw a Precondition exception if the provided string
            is null, empty or contains only whitespace.
            </summary>
            <param name="parameter">Teh string parameter to check.</param>
            <param name="parameterName">The name of the string parameter (used in error messages).</param>
            <exception cref="T:Onpoint.Commons.Core.CodeContracts.PreconditionException">
            <para>The parameter is null, empty or contains only whitespace.</para>
            <para>- or -</para>
            <para>The parameter name is null, empty or all whitespace</para>
            </exception>
        </member>
        <member name="M:Onpoint.Commons.Core.CodeContracts.ParameterCheck.ParameterRequired(System.Object,System.String)">
            <summary>
            Throws a Precondition exception if the provided object
            is null
            </summary>
            <param name="parameter">The object to test.</param>
            <param name="parameterName">The name of the parameter.</param>
            <exception cref="T:Onpoint.Commons.Core.CodeContracts.PreconditionException">
            <para>The object is null</para>
            <para>- or -</para>
            <para>The parameter name is null, empty or all whitespace</para>
            </exception>
        </member>
        <member name="M:Onpoint.Commons.Core.CodeContracts.ParameterCheck.IntParameterIsNonZero(System.Int32,System.String)">
            <summary>
            Throws a Precondition exception if the provided integer is zero
            </summary>
            <param name="parameter">The integer to test.</param>
            <param name="parameterName">The name of the parameter.</param>
            <exception cref="T:Onpoint.Commons.Core.CodeContracts.PreconditionException">
            <para>The integer is zero</para>
            <para>- or -</para>
            <para>The parameter name is null, empty or all whitespace</para>
            </exception>
        </member>
        <member name="M:Onpoint.Commons.Core.CodeContracts.ParameterCheck.ListMustContainAtLeastOne``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            Throws a Precondition exception if the provided list is null or does not contain at least one member
            </summary>
            <typeparam name="T">The type of list</typeparam>
            <param name="listParameter">A list of type T.</param>
            <param name="parameterName">The name of the parameter</param>
            <exception cref="T:Onpoint.Commons.Core.CodeContracts.PreconditionException">
            <para>The list is null</para>
            <para>- or -</para>
            <para>The list does not contain at least one element</para>
            <para>- or -</para>
            <para>The parameter name is null, empty or all whitespace</para>
            </exception>
        </member>
        <member name="T:Onpoint.Commons.Core.CodeContracts.PreconditionException">
            <summary>
            Method preconditions not met.
            </summary>
            <remarks>
            Code should not generally throw this exception.  Rather,
            use methods in the static ParameterCheck class
            </remarks>
            <seealso cref="T:Onpoint.Commons.Core.CodeContracts.ParameterCheck"/>
        </member>
        <member name="M:Onpoint.Commons.Core.CodeContracts.PreconditionException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Onpoint.Commons.Core.CodeContracts.PreconditionException.#ctor(System.String)">
            <summary>
            Constructor with error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Onpoint.Commons.Core.CodeContracts.PreconditionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructior with error message and inner exception.
            </summary>
            <param name="message">The error message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Onpoint.Commons.Core.CodeContracts.PreconditionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used in serialization.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="T:Onpoint.Commons.Core.Configuration">
            <summary>
            Configuration of commons
            </summary>
        </member>
        <member name="M:Onpoint.Commons.Core.Configuration.BuildWith(Onpoint.Commons.Core.ServiceLocator.IServiceLocator)">
            <summary>
            Assigns the service locator builder.
            </summary>
        </member>
        <member name="M:Onpoint.Commons.Core.Configuration.LogWith(Onpoint.Commons.Core.Logging.ILogProvider)">
            <summary>
            Assigns the log provider.
            </summary>
            <param name="logProvider"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Configuration.Configure">
            <summary>
            Apply the configuration.
            </summary>
        </member>
        <member name="P:Onpoint.Commons.Core.Configuration.LogProvider">
            <summary>
            Gets the configured log provider.
            </summary>
        </member>
        <member name="P:Onpoint.Commons.Core.Configuration.Instance">
            <summary>
            Gets the singleton instance.
            </summary>
        </member>
        <member name="T:Onpoint.Commons.Core.Helpers.ApplicationInformation">
            <summary>
            Common information about the application
            </summary>
        </member>
        <member name="M:Onpoint.Commons.Core.Helpers.ApplicationInformation.LogApplicationInfo">
            <summary>
            Logs information about the application to the configured loggers.
            </summary>
        </member>
        <member name="P:Onpoint.Commons.Core.Helpers.ApplicationInformation.Name">
            <summary>
            Gets the name of the application as contained in the AssemblyProduct attribute
            of the entry assembly.
            </summary>
        </member>
        <member name="P:Onpoint.Commons.Core.Helpers.ApplicationInformation.Version">
            <summary>
            Gets the version of the application as contained in the AssemblyVersion attribute
            of the entry assembly.
            This is the value used by .NET to check for compatibility with callers.
            </summary>
        </member>
        <member name="P:Onpoint.Commons.Core.Helpers.ApplicationInformation.FileVersion">
            <summary>
            Gets the file version of the application as contained in the AssemblyFileVersion attribute
            of the entry assembly.
            This is the library version with the build number.  Build number is not relevant
            when checking for compatibility.
            </summary>
        </member>
        <member name="P:Onpoint.Commons.Core.Helpers.ApplicationInformation.Directory">
            <summary>
            Gets the application directory.
            </summary>
        </member>
        <member name="P:Onpoint.Commons.Core.Helpers.ApplicationInformation.IsWebApplication">
            <summary>
            Gets a boolean indicating whether of not the current application is a web application.
            </summary>
            <remarks>The application is considered a web application of the configuration file
            name is web.config.</remarks>
        </member>
        <member name="T:Onpoint.Commons.Core.Logging.LogInitializer">
            <summary>
            Helpers for log4net logging
            </summary>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.LogInitializer.Initialize">
            <summary>
            Initialize the log4net system.  Watch the configuration file for changes.
            </summary>
        </member>
        <member name="T:Onpoint.Commons.Core.Resources.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Onpoint.Commons.Core.Resources.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Onpoint.Commons.Core.Resources.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Onpoint.Commons.Core.Resources.Messages.NameSelectorCannotFindComponent">
            <summary>
              Looks up a localized string similar to Cannot find component with name {0} of type {1}.
            </summary>
        </member>
        <member name="P:Onpoint.Commons.Core.Resources.Messages.ParameterCheck_GetParameterRequiredErrorMessage">
            <summary>
              Looks up a localized string similar to The parameter {0} is required..
            </summary>
        </member>
        <member name="P:Onpoint.Commons.Core.Resources.Messages.ParameterCheck_IntParameterIsNonZero">
            <summary>
              Looks up a localized string similar to The parameter {0} must not have a zero value.
            </summary>
        </member>
        <member name="P:Onpoint.Commons.Core.Resources.Messages.ParameterCheck_ListMustContainAtLeastOne">
            <summary>
              Looks up a localized string similar to List {0} must contain at least one member.
            </summary>
        </member>
        <member name="P:Onpoint.Commons.Core.Resources.Messages.ParameterCheck_StringRequiredAndNotWhitespace">
            <summary>
              Looks up a localized string similar to The string parameter {0} must not be null, empty or contain only whitespace..
            </summary>
        </member>
        <member name="P:Onpoint.Commons.Core.Resources.Messages.String1">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="T:Onpoint.Commons.Core.ServiceLocator.ComponentLifestyle">
            <summary>
            Generic component lifestyle
            </summary>
        </member>
        <member name="F:Onpoint.Commons.Core.ServiceLocator.ComponentLifestyle.Singleton">
            <summary>
            Singleton
            </summary>
        </member>
        <member name="F:Onpoint.Commons.Core.ServiceLocator.ComponentLifestyle.Transient">
            <summary>
            New component created for each resolution.
            </summary>
        </member>
        <member name="F:Onpoint.Commons.Core.ServiceLocator.ComponentLifestyle.Thread">
            <summary>
            One component for each thread.
            </summary>
        </member>
        <member name="F:Onpoint.Commons.Core.ServiceLocator.ComponentLifestyle.PerWebRequest">
            <summary>
            One instance per web request.
            </summary>
        </member>
        <member name="T:Onpoint.Commons.Core.ServiceLocator.IComponentInstaller">
            <summary>
            Interface for a component installer.
            </summary>
        </member>
        <member name="M:Onpoint.Commons.Core.ServiceLocator.IComponentInstaller.Install(Onpoint.Commons.Core.ServiceLocator.IServiceLocator)">
            <summary>
            Install components in the given service locator.
            </summary>
            <param name="serviceLocator"></param>
        </member>
        <member name="T:Onpoint.Commons.Core.ServiceLocator.IHandler">
            <summary>
            Interface to coordinate the creation and destruction 
            of a component via the service locator/container.
            </summary>
        </member>
        <member name="M:Onpoint.Commons.Core.ServiceLocator.IHandler.Resolve">
            <summary>
            Return an instance of the implementation type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Onpoint.Commons.Core.ServiceLocator.IHandler.Service">
            <summary>
            Gets the service type.  Often an interface.
            </summary>
        </member>
        <member name="P:Onpoint.Commons.Core.ServiceLocator.IHandler.Implementation">
            <summary>
            Gets the implementation type of the service.
            </summary>
        </member>
        <member name="P:Onpoint.Commons.Core.ServiceLocator.IHandler.Key">
            <summary>
            Gets the key that can be used to lookup this handler
            in the locator/container.
            </summary>
        </member>
        <member name="T:Onpoint.Commons.Core.Logging.ILog">
            <summary>
            Common logging interface.
            </summary>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.ILog.Error(System.Object)">
            <summary>
            Log a message at the error level.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.ILog.Error(System.Object,System.Exception)">
            <summary>
            Log a message and exception at the error level.
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.ILog.ErrorFormat(System.String,System.Object[])">
            <summary>
            Log a message using a format string at the error level.
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.ILog.Fatal(System.Object)">
            <summary>
            Log a message at the fatal level.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.ILog.Fatal(System.Object,System.Exception)">
            <summary>
            Log a message and an exception at the fatal level.
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.ILog.FatalFormat(System.String,System.Object[])">
            <summary>
            Log a message using a format string at the fatal level.
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.ILog.Debug(System.Object)">
            <summary>
            Log a message at the debug level.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.ILog.Debug(System.Object,System.Exception)">
            <summary>
            Log a message and exception at the debug level.
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.ILog.DebugFormat(System.String,System.Object[])">
            <summary>
            Log a message using a format string at the debug level.
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.ILog.Info(System.Object)">
            <summary>
            Log a message at the info level.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.ILog.Info(System.Object,System.Exception)">
            <summary>
            Log a message and exception at the info level.
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.ILog.InfoFormat(System.String,System.Object[])">
            <summary>
            Log a message using a format string at the info level.
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.ILog.Warn(System.Object)">
            <summary>
            Log a message at the warning level.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.ILog.Warn(System.Object,System.Exception)">
            <summary>
            Log a message and exception at the warning level.
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.ILog.WarnFormat(System.String,System.Object[])">
            <summary>
            Log a message using a format string at the warning level.
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="P:Onpoint.Commons.Core.Logging.ILog.IsErrorEnabled">
            <summary>
            Gets <see langword="true"/> if error logging is enabled.
            </summary>
        </member>
        <member name="P:Onpoint.Commons.Core.Logging.ILog.IsFatalEnabled">
            <summary>
            Gets <see langword="true"/> if logging is enabled at the fatal level.
            </summary>
        </member>
        <member name="P:Onpoint.Commons.Core.Logging.ILog.IsDebugEnabled">
            <summary>
            Gets <see langword="true"/> if debug level logging is enabled.
            </summary>
        </member>
        <member name="P:Onpoint.Commons.Core.Logging.ILog.IsInfoEnabled">
            <summary>
            Gets <see langword="true"/> if info level logging is enabled.
            </summary>
        </member>
        <member name="P:Onpoint.Commons.Core.Logging.ILog.IsWarnEnabled">
            <summary>
            Gets <see langword="true"/> if warning level logging is enabled.
            </summary>
        </member>
        <member name="T:Onpoint.Commons.Core.Logging.ILogProvider">
            <summary>
            Interface to get ILog instances.
            </summary>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.ILogProvider.GetLogger(System.Type)">
            <summary>
            Gets the ILog implementation for the type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.ILogProvider.GetLogger(System.String)">
            <summary>
            Gets the ILog implementation for the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Onpoint.Commons.Core.ServiceLocator.IServiceLocator">
            <summary>
            Generic service locator
            </summary>
        </member>
        <member name="M:Onpoint.Commons.Core.ServiceLocator.IServiceLocator.Resolve``1">
            <summary>
            Get the default instance of the given type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Onpoint.Commons.Core.ServiceLocator.IServiceLocator.Resolve(System.Type)">
            <summary>
            Get the default instance of the given type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Onpoint.Commons.Core.ServiceLocator.IServiceLocator.Resolve``1(System.String)">
            <summary>
            Get the instance of the given type with the given key.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Onpoint.Commons.Core.ServiceLocator.IServiceLocator.Resolve(System.Type,System.String)">
            <summary>
            Get the instance of the given type with the given key.
            </summary>
            <param name="type"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Onpoint.Commons.Core.ServiceLocator.IServiceLocator.CanResolve(System.Type)">
            <summary>
            Returns true if the given type can be resolved.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Onpoint.Commons.Core.ServiceLocator.IServiceLocator.CanResolve(System.Type,System.String)">
            <summary>
            Returns true if a component with the given type and key can be resolved.
            </summary>
            <param name="type"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Onpoint.Commons.Core.ServiceLocator.IServiceLocator.ResolveAll``1">
            <summary>
            Resolve all components of the given type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Onpoint.Commons.Core.ServiceLocator.IServiceLocator.GetAllHandlersFor(System.Type)">
            <summary>
            Get the handlers for the given type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Onpoint.Commons.Core.ServiceLocator.IServiceLocator.Release(System.Object)">
            <summary>
            Release the given instance.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.ServiceLocator.IServiceLocator.LogRegisteredComponents">
            <summary>
            Log information about the currently registered components.
            </summary>
        </member>
        <member name="M:Onpoint.Commons.Core.ServiceLocator.IServiceLocator.NativelyRegisterComponentsAndPlugins">
            <summary>
            Load all plugins and run native container registration for each assembly (if available)
            </summary>
        </member>
        <member name="M:Onpoint.Commons.Core.ServiceLocator.IServiceLocator.Register(System.Type,System.Type,Onpoint.Commons.Core.ServiceLocator.ComponentLifestyle)">
            <summary>
            Register an implementation of the given interface type with a 
            lifestyle that defaults to singleton under the key full name
            of implementation.
            </summary>
            <param name="interfaceType"></param>
            <param name="instanceType"></param>
            <param name="componentLifestyle"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.ServiceLocator.IServiceLocator.Register(System.String,System.Type,System.Type,Onpoint.Commons.Core.ServiceLocator.ComponentLifestyle)">
            <summary>
            Register an implementation of the given interface type with a 
            lifestyle that defaults to singleton and the given key.
            </summary>
        </member>
        <member name="T:Onpoint.Commons.Core.Logging.LogManager">
            <summary>
            Log manager.
            </summary>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.LogManager.GetLogger(System.Type)">
            <summary>
            Gets the ILog implementation for the type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.LogManager.GetLogger(System.String)">
            <summary>
            Gets the ILog implementation for the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Onpoint.Commons.Core.Logging.NullLog">
            <summary>
            ILog implementation that does nothing.
            </summary>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.NullLog.Error(System.Object)">
            <summary>
            Log a message at the error level.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.NullLog.Error(System.Object,System.Exception)">
            <summary>
            Log a message and exception at the error level.
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.NullLog.ErrorFormat(System.String,System.Object[])">
            <summary>
            Log a message using a format string at the error level.
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.NullLog.Fatal(System.Object)">
            <summary>
            Log a message at the fatal level.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.NullLog.Fatal(System.Object,System.Exception)">
            <summary>
            Log a message and an exception at the fatal level.
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.NullLog.FatalFormat(System.String,System.Object[])">
            <summary>
            Log a message using a format string at the fatal level.
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.NullLog.Debug(System.Object)">
            <summary>
            Log a message at the debug level.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.NullLog.Debug(System.Object,System.Exception)">
            <summary>
            Log a message and exception at the debug level.
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.NullLog.DebugFormat(System.String,System.Object[])">
            <summary>
            Log a message using a format string at the debug level.
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.NullLog.Info(System.Object)">
            <summary>
            Log a message at the info level.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.NullLog.Info(System.Object,System.Exception)">
            <summary>
            Log a message and exception at the info level.
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.NullLog.InfoFormat(System.String,System.Object[])">
            <summary>
            Log a message using a format string at the info level.
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.NullLog.Warn(System.Object)">
            <summary>
            Log a message at the warning level.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.NullLog.Warn(System.Object,System.Exception)">
            <summary>
            Log a message and exception at the warning level.
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.NullLog.WarnFormat(System.String,System.Object[])">
            <summary>
            Log a message using a format string at the warning level.
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="P:Onpoint.Commons.Core.Logging.NullLog.IsErrorEnabled">
            <summary>
            Gets <see langword="true"/> if error logging is enabled.
            </summary>
        </member>
        <member name="P:Onpoint.Commons.Core.Logging.NullLog.IsFatalEnabled">
            <summary>
            Gets <see langword="true"/> if logging is enabled at the fatal level.
            </summary>
        </member>
        <member name="P:Onpoint.Commons.Core.Logging.NullLog.IsDebugEnabled">
            <summary>
            Gets <see langword="true"/> if debug level logging is enabled.
            </summary>
        </member>
        <member name="P:Onpoint.Commons.Core.Logging.NullLog.IsInfoEnabled">
            <summary>
            Gets <see langword="true"/> if info level logging is enabled.
            </summary>
        </member>
        <member name="P:Onpoint.Commons.Core.Logging.NullLog.IsWarnEnabled">
            <summary>
            Gets <see langword="true"/> if warning level logging is enabled.
            </summary>
        </member>
        <member name="T:Onpoint.Commons.Core.Logging.NullLogProvider">
            <summary>
            Implementation of ILogProvider that returns a do-nothing
            logger.
            </summary>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.NullLogProvider.GetLogger(System.Type)">
            <summary>
            Gets the ILog implementation for the type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Onpoint.Commons.Core.Logging.NullLogProvider.GetLogger(System.String)">
            <summary>
            Gets the ILog implementation for the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
    </members>
</doc>
