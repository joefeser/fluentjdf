<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Onpoint.Commons.Core.CastleWindsor</name>
    </assembly>
    <members>
        <member name="T:Onpoint.Commons.Core.CastleWindsor.ConfigurationExtensions">
            <summary>
            Extensions to the configuration.
            </summary>
        </member>
        <member name="M:Onpoint.Commons.Core.CastleWindsor.ConfigurationExtensions.UseCastleWindsor(Onpoint.Commons.Core.Configuration)">
            <summary>
            Configure castle windsor as the container creating a new container.
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:Onpoint.Commons.Core.CastleWindsor.ConfigurationExtensions.UseCastleWindsor(Onpoint.Commons.Core.Configuration,Castle.Windsor.IWindsorContainer)">
            <summary>
            Configure Castle Windsor as the container using an existing container.
            </summary>
            <param name="configuration"></param>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="T:Onpoint.Commons.Core.CastleWindsor.Extensions">
            <summary>
            Extensions for Castle Windsor container
            </summary>
        </member>
        <member name="M:Onpoint.Commons.Core.CastleWindsor.Extensions.RegisterRemainingInterfaceImplementations(Castle.Windsor.IWindsorContainer)">
            <summary>
            Register components in the calling assembly as singletons.
            </summary>
            <param name="container">The Windsor container.</param>
            <returns>The Windsor container.</returns>
        </member>
        <member name="M:Onpoint.Commons.Core.CastleWindsor.Extensions.RegisterRemainingInterfaceImplementations(Castle.Windsor.IWindsorContainer,System.Reflection.Assembly)">
            <summary>
            Register components in the given assembly as singletons.
            </summary>
            <param name="container">The Windsor container.</param>
            <param name="assembly">The assembly</param>
            <returns>The Windsor container.</returns>
        </member>
        <member name="M:Onpoint.Commons.Core.CastleWindsor.Extensions.RegisterRemainingInterfaceImplementations(Castle.Windsor.IWindsorContainer,Castle.Core.LifestyleType,System.Reflection.Assembly)">
            <summary>
            Register components in the given assembly with the given lifestyle.
            </summary>
            <param name="container">The Windsor container.</param>
            <param name="lifestyle">The desired lifestyle</param>
            <param name="assembly">The assembly</param>
            <returns>The Windsor container.</returns>
        </member>
        <member name="M:Onpoint.Commons.Core.CastleWindsor.Extensions.InstallAssemblies(Castle.Windsor.IWindsorContainer,System.Reflection.Assembly[])">
            <summary>
            Register components in the one or more assemblies
            as directed in each assembly's Windsor installer class.
            </summary>
            <param name="container">The Windsor container.</param>
            <param name="assemblies">One or more assemblies.</param>
        </member>
        <member name="M:Onpoint.Commons.Core.CastleWindsor.Extensions.LoadAndInstallAssemblies(Castle.Windsor.IWindsorContainer,Castle.MicroKernel.Registration.AssemblyFilter[])">
            <summary>
            Register components in assemblies loaded via one or more assembly filters
            as directed in each assembly's Windsor installer class.
            </summary>
            <param name="container">The Windsor container.</param>
            <param name="assemblyFilters">One or more assembly filters</param>
            <returns>The Windsor container.</returns>
        </member>
        <member name="M:Onpoint.Commons.Core.CastleWindsor.Extensions.LogRegisteredComponents(Castle.Windsor.IWindsorContainer)">
            <summary>
            Log the registered components in the container.
            </summary>
            <param name="container">The container that has the component registry to be logged.</param>
        </member>
        <member name="M:Onpoint.Commons.Core.CastleWindsor.Extensions.GetClassesImplementing``1(Castle.Windsor.IWindsorContainer)">
            <summary>
            Gets a list of class full names that are registered with Windsor as an implementation
            of the given service type.
            </summary>
            <typeparam name="T">The service type.</typeparam>
            <param name="container">The Windsor container.</param>
        </member>
        <member name="T:Onpoint.Commons.Core.CastleWindsor.WindsorServiceLocator">
            <summary>
            Implementation of IServiceLocator for Castle Windsor.
            </summary>
        </member>
        <member name="M:Onpoint.Commons.Core.CastleWindsor.WindsorServiceLocator.#ctor(Castle.Windsor.IWindsorContainer)">
            <summary>
            Constructor.
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.CastleWindsor.WindsorServiceLocator.Resolve``1">
            <summary>
            Get the default instance of the given type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Onpoint.Commons.Core.CastleWindsor.WindsorServiceLocator.Resolve(System.Type)">
            <summary>
            Get the default instance of the given type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Onpoint.Commons.Core.CastleWindsor.WindsorServiceLocator.Resolve``1(System.String)">
            <summary>
            Get the instance of the given type with the given key.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Onpoint.Commons.Core.CastleWindsor.WindsorServiceLocator.Resolve(System.Type,System.String)">
            <summary>
            Get the instance of the given type with the given key.
            </summary>
            <param name="type"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Onpoint.Commons.Core.CastleWindsor.WindsorServiceLocator.CanResolve(System.Type)">
            <summary>
            Returns true if the given type can be resolved.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Onpoint.Commons.Core.CastleWindsor.WindsorServiceLocator.CanResolve(System.Type,System.String)">
            <summary>
            Returns true if a component with the given type and key can be resolved.
            </summary>
            <param name="type"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Onpoint.Commons.Core.CastleWindsor.WindsorServiceLocator.ResolveAll``1">
            <summary>
            Resolve all components of the given type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Onpoint.Commons.Core.CastleWindsor.WindsorServiceLocator.GetAllHandlersFor(System.Type)">
            <summary>
            Get the handlers for the given type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Onpoint.Commons.Core.CastleWindsor.WindsorServiceLocator.Release(System.Object)">
            <summary>
            Release the given instance.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.CastleWindsor.WindsorServiceLocator.LogRegisteredComponents">
            <summary>
            Log information about the currently registered components.
            </summary>
        </member>
        <member name="M:Onpoint.Commons.Core.CastleWindsor.WindsorServiceLocator.NativelyRegisterComponentsAndPlugins">
            <summary>
            Load all plugins and run native container registration for each assembly (if available)
            </summary>
        </member>
        <member name="M:Onpoint.Commons.Core.CastleWindsor.WindsorServiceLocator.Register(System.Type,System.Type,Onpoint.Commons.Core.ServiceLocator.ComponentLifestyle)">
            <summary>
            Register an implementation of the given interface type with a 
            lifestyle that defaults to singleton under the key full name
            of implementation.
            </summary>
            <param name="interfaceType"></param>
            <param name="instanceType"></param>
            <param name="componentLifestyle"></param>
        </member>
        <member name="M:Onpoint.Commons.Core.CastleWindsor.WindsorServiceLocator.Register(System.String,System.Type,System.Type,Onpoint.Commons.Core.ServiceLocator.ComponentLifestyle)">
            <summary>
            Register an implementation of the given interface type with a 
            lifestyle that defaults to singleton and the given key.
            </summary>
        </member>
    </members>
</doc>
